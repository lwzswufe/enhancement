import redis 

# host是redis主机，需要redis服务端和客户端都启动 redis默认端口是6379
r = redis.Redis(host='localhost', port=6379, decode_responses=True) 
'''
1. Lpush 命令将一个或多个值插入到列表头部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。 当 key 存在但不是列表类型时，返回一个错误。
执行 LPUSH 命令后，返回列表的长度。
2. Rpush 命令用于将一个或多个值插入到列表的尾部(最右边)。如果列表不存在，一个空列表会被创建并执行 RPUSH 操作。 当列表存在但不是列表类型时，返回一个错误。
执行 RPUSH 操作后，列表的长度。
3.Blpop 命令移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
如果列表为空，返回一个 None 。 否则，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。
4.Brpop 命令移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
假如在指定时间内没有任何元素被弹出，则返回一个None 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。
5. Brpoplpush 命令从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
假如在指定时间内没有任何元素被弹出，则返回一个 None 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长。
6. Lindex 命令用于通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
列表中下标为指定索引值的元素。 如果指定索引值不在列表的区间范围内，返回 None 。
7. Linsert 命令用于在列表的元素前或者后插入元素。
当指定元素不存在于列表中时，不执行任何操作。 当列表不存在时，被视为空列表，不执行任何操作。 如果 key 不是列表类型，返回一个错误。
如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。 如果 key 不存在或为空列表，返回 0 。
8. Llen 命令用于返回列表的长度。 如果列表 key 不存在，则 key 被解释为一个空列表，返回 0 。 如果 key 不是列表类型，返回一个错误。
9. Lpop 命令用于移除并返回列表的第一个元素。
列表的第一个元素。 当列表 key 不存在时，返回 None 。
10.Lpushx 将一个或多个值插入到已存在的列表头部，列表不存在时操作无效。
11.Lrange 返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。
 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
12.Lrem 根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。
COUNT 的值可以是以下几种：
count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。
count < 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。
count = 0 : 移除表中所有与 VALUE 相等的值。
被移除元素的数量。 列表不存在时返回 0 。
13. Lset 通过索引来设置元素的值。
当索引参数超出范围，或对一个空列表进行 LSET 时，返回一个错误
操作成功返回 True ，否则返回错误信息。
14. Ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 
你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
15. Rpop 命令用于移除并返回列表的最后一个元素。
列表的最后一个元素。 当列表不存在时，返回 None 。
16.Rpoplpush 命令用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。
17.Rpushx 命令用于将一个或多个值插入到已存在的列表尾部(最右边)。如果列表不存在，操作无效。
'''
print("列表 1 头部/左侧 插入 1", r.lpush("1",1))            # 输出的结果是1
print("列表 1 头部/左侧 插入 1", r.lpush("1",1))            # 输出的结果是2
print("列表 1 头部/左侧 插入 2, 3, 4", r.lpush("1",2,3,4))  # 输出的结果是5
print("列表 1 的所有元素:", r.lrange("1", 0, -1)) 
print("列表 1 删除等于1的元素", r.lrem("1", 1, 1))
print("列表 1 的所有元素:", r.lrange("1", 0, -1)) 

print("列表 2 初始化", r.rpush("2",1))                     # 输出的结果是1
print("列表 2 尾部/右侧 插入 2 3", r.rpush("2",2,3))        # 输出的结果是3
print("列表 2 尾部/右侧 插入 4 5", r.rpush("2",4,5))        # 输出的结果是5
print("列表 2 长度:", r.llen("2"))
print("列表 2 的所有元素:", r.lrange("2", 0, r.llen("2"))) 
print("列表 2 的提取指定区间[1， -2]的元素 删除区间外的元素", r.ltrim("2",1,-2))         # 输出的结果是True
print("列表 2 的所有元素:", r.lrange("2", 0, r.llen("2"))) 
print("列表 2 的第 1个元素:", r.lindex("2",1))
print("列表 2 的第-1个元素:", r.lindex("2",-1))

r.unlink("1")                             # 删除列表 1
r.unlink("2")                             # 删除列表 2